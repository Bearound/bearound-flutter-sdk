name: CI/CD Pipeline

on:
  push:
    branches: [ develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  # Job para an√°lise de c√≥digo e formata√ß√£o
  code_quality:
    name: Code Quality & Formatting
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.0'
        channel: 'stable'
        cache: true

    - name: Get dependencies
      run: flutter pub get

    - name: Verify formatting
      run: dart format --output=none --set-exit-if-changed .

    - name: Analyze project source
      run: flutter analyze --fatal-infos

    - name: Run dart fix dry-run
      run: dart fix --dry-run

  # Job para testes unit√°rios
  unit_tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.0'
        channel: 'stable'
        cache: true

    - name: Get dependencies
      run: flutter pub get

    - name: Run tests with coverage
      run: flutter test --coverage

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  # Job para valida√ß√£o de build
  build_validation:
    name: Build Validation
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [code_quality, unit_tests]

    strategy:
      matrix:
        target: [android, ios]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.0'
        channel: 'stable'
        cache: true

    - name: Setup Java 17
      if: matrix.target == 'android'
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Get dependencies
      run: flutter pub get

    - name: Build for Android
      if: matrix.target == 'android'
      run: |
        cd example
        flutter build apk --debug
        flutter build appbundle --debug

    - name: Build for iOS (dry run)
      if: matrix.target == 'ios'
      run: |
        cd example
        flutter build ios --debug --no-codesign

  # Job para valida√ß√£o de depend√™ncias e seguran√ßa
  dependency_validation:
    name: Dependency & Security Validation
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.0'
        channel: 'stable'
        cache: true

    - name: Get dependencies
      run: flutter pub get

    - name: Check for outdated dependencies
      run: flutter pub outdated --json > outdated_deps.json || true

    - name: Validate pubspec.yaml
      run: flutter pub deps --json > deps.json

    - name: Check for dependency conflicts
      run: flutter pub deps

    - name: Verify pub.dev score readiness
      run: |
        flutter pub publish --dry-run

  # Job para valida√ß√£o da documenta√ß√£o
  documentation:
    name: Documentation Validation
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.0'
        channel: 'stable'
        cache: true

    - name: Get dependencies
      run: flutter pub get

    - name: Generate documentation
      run: dart doc --validate-links

    - name: Check for missing documentation
      run: |
        echo "Checking for undocumented public APIs..."
        dart doc --validate-links 2>&1 | grep -i "warning" || echo "Documentation validation passed"

  # Job de consolida√ß√£o final
  ci_success:
    name: CI Success
    runs-on: ubuntu-latest
    needs: [code_quality, unit_tests, build_validation, dependency_validation, documentation]
    if: always()

    steps:
    - name: Check all jobs status
      if: |
        needs.code_quality.result != 'success' ||
        needs.unit_tests.result != 'success' ||
        needs.build_validation.result != 'success' ||
        needs.dependency_validation.result != 'success' ||
        needs.documentation.result != 'success'
      run: |
        echo "‚ùå One or more CI jobs failed:"
        echo "Code Quality: ${{ needs.code_quality.result }}"
        echo "Unit Tests: ${{ needs.unit_tests.result }}"
        echo "Build Validation: ${{ needs.build_validation.result }}"
        echo "Dependency Validation: ${{ needs.dependency_validation.result }}"
        echo "Documentation: ${{ needs.documentation.result }}"
        exit 1

    - name: All checks passed
      run: |
        echo "‚úÖ All CI checks passed successfully!"
        echo "üöÄ Ready for merge/deployment"